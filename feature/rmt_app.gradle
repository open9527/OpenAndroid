import com.farmer.open9527.buildsrc.*

apply {
    plugin PluginsConfigs.Ids.Application
    plugin PluginsConfigs.Ids.Kotlin
    plugin PluginsConfigs.Ids.KotlinKapt
    from '../../../common.gradle'
}

android {
    defaultConfig {
        applicationId AppConfigs.Rmt.applicationId
        versionName AppConfigs.Rmt.versionName
        versionCode AppConfigs.Rmt.versionCode

        resConfigs 'zh'
        resConfigs 'xxhdpi'
        proguardFiles 'proguard-sdk.pro', 'proguard-app.pro'

        // 日志打印开关
        buildConfigField('boolean', 'LOG_ENABLE', '' + LOG_ENABLE + '')
        // 测试服务器的主机地址
        buildConfigField('String', 'HOST_URL', '"' + HOST_URL + '"')
    }

    signingConfigs {
        File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
        if (!signPropertiesFile.exists()) return
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        config {
            storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
            storePassword properties['storePassword']
            keyAlias properties['keyAlias']
            keyPassword properties['keyPassword']

        }
    }

    buildTypes {
        debug {
            // 给包名添加后缀
            applicationIdSuffix '.debug'
            // 调试模式开关
            debuggable true
            jniDebuggable true
            // 压缩对齐开关
            zipAlignEnabled false
            // 移除无用的资源
            shrinkResources false
            // 代码混淆开关
            minifyEnabled false
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'      : '@string/app_name_debug',
                    'app_icon'      : '@mipmap/ic_launcher',
                    'app_round_icon': '@mipmap/ic_launcher_round'
            ])
            // 调试模式下只保留一种架构的 so 库，提升打包速度
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }

        preview.initWith(debug)
        preview {
            applicationIdSuffix ''
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'      : '@string/app_name_preview',
                    'app_icon'      : '@mipmap/ic_launcher',
                    'app_round_icon': '@mipmap/ic_launcher_round'
            ])
        }

        release {
            // 调试模式开关
            debuggable false
            jniDebuggable false
            // 压缩对齐开关
            zipAlignEnabled true
            // 移除无用的资源
            shrinkResources true
            // 代码混淆开关
            minifyEnabled true
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'      : '@string/app_name_release',
                    'app_icon'      : '@mipmap/ic_launcher',
                    'app_round_icon': '@mipmap/ic_launcher_round'
            ])
            // 仅保留两种架构的 so 库，根据 Bugly 统计得出
            ndk {
                // armeabi：万金油架构平台（占用率：0%）
                // armeabi-v7a：曾经主流的架构平台（占用率：10%）
                // arm64-v8a：目前主流架构平台（占用率：95%）
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
    }

    // AOP 配置（exclude 和 include 二选一）
    // 需要进行配置，否则就会引发冲突，具体表现为：
    // 第一种：编译不过去，报错：java.util.zip.ZipException：Cause: zip file is empty
    // 第二种：编译能过去，但运行时报错：ClassNotFoundException: Didn't find class on path: DexPathList
//    aspectjx {
//        // 排除一些第三方库的包名（Gson、 LeakCanary 和 AOP 有冲突）
//        // exclude 'androidx', 'com.google', 'com.squareup', 'org.apache', 'com.alipay', 'com.taobao', 'versions.9'
//        // 只对以下包名做 AOP 处理
//        include android.defaultConfig.applicationId
//    }

    applicationVariants.all { variant ->
        // apk 输出文件名配置
        variant.outputs.all { output ->
            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format('MMdd')
            }
            outputFileName += '.apk'
        }
    }
}

dependencies {
    implementation LibsConfigs.Material
    implementation LibsConfigs.UtilCode
    implementation LibsConfigs.ConstraintLayout
}